arguments_gonv() {
  SUBCOMMANDS="init|enable|disable|list|destroy"
  INIT_DESCRIPTION="Initialize a new go environment"
  INIT_OPTIONS="version:v:str name:n:str platform:p:str"
  ENABLE_DESCRIPTION="Enable a go environment"
  ENABLE_OPTIONS="name:n:str"
  DISABLE_DESCRIPTION="Disable current go environment"
  DESTROY_DESCRIPTION="Remove go environment"
  DESTROY_OPTIONS="name:n:str"
  LIST_DESCRIPTION="List go environments"
}

task_gonv() {
  #See https://golang.org/dl/ for available versions/platforms
  DEFAULT_VERSION=1.19
  DEFAULT_PLATFORM=linux-amd64
  ROOT_STATE_DIR=$TASK_MASTER_HOME/state/gonv
  GONV_STATE_FILE=$TASK_MASTER_HOME/state/gonv.vars
  GO_DOWNLOAD_CACHE=$ROOT_STATE_DIR/downloads
  gonv_load_vars
  case $TASK_SUBCOMMAND in
    "init")
    gonv_init
    ;;
    "enable")
    gonv_enable
    ;;
    "disable")
    gonv_disable
    ;;
    "destroy")
    gonv_destroy
    ;;
    "list")
    gonv_list
    ;;
  esac
}

gonv_load_vars() {
  if [[ -z "$ARG_NAME" ]]
  then
    ARG_NAME=$(basename $TASK_DIR)
  fi
  ENV_DIR=$ROOT_STATE_DIR/$ARG_NAME
  TTY=$(tty | tr -d '/' )
  . "$GONV_STATE_FILE"
}

gonv_check_active() {
  if [[ "$GONV_ACTIVE" == "$TTY" ]]
  then
    echo "A go environment is already active. Cannot $TASK_SUBCOMMAND."
    exit 1
  fi
}

gonv_init() {
  if [[ -z "$ARG_VERSION" ]]
  then
    ARG_VERSION=$DEFAULT_VERSION
  fi

  if [[ -z "$ARG_PLATFORM" ]]
  then
    ARG_PLATFORM=$DEFAULT_PLATFORM
  fi

  echo Initializing go $ARG_VERSION environment in $ENV_DIR
  mkdir -p $ENV_DIR/modules $GO_DOWNLOAD_CACHE
  cd $ENV_DIR

  GO_TAR=go$ARG_VERSION.$ARG_PLATFORM.tar.gz
  if [[ ! -f "$GO_DOWNLOAD_CACHE/$GO_TAR" ]]
  then
    curl -L -o "$GO_DOWNLOAD_CACHE/$GO_TAR" "https://golang.org/dl/$GO_TAR"
  fi

  cp "$GO_DOWNLOAD_CACHE/$GO_TAR" .
  tar -xf "$GO_TAR"
  rm "$GO_TAR"

  echo "GONV_$ARG_NAME=$ENV_DIR" >> "$GONV_STATE_FILE"
}

gonv_enable() {
  gonv_check_active
  echo Enabling go environment $ARG_NAME
  echo "PS1_$TTY=\"$PS1\"" >> "$GONV_STATE_FILE"
  echo "PATH_$TTY=\"$PATH\"" >> "$GONV_STATE_FILE"
  echo "GOPATH_$TTY=\"$GOPATH\"" >> "$GONV_STATE_FILE"
  export_var "PS1" "(go-$ARG_NAME)-$PS1"
  export_var "GOPATH" "$ENV_DIR/modules"
  export_var "PATH" "$PATH:$ENV_DIR/go/bin:$ENV_DIR/modules/bin"
  echo "GONV_ACTIVE=$TTY" >> $GONV_STATE_FILE
  set_trap "cd $RUNNING_DIR; task gonv disable ;"
}

gonv_disable() {
  if [[ -n "$GONV_ACTIVE" ]]
  then
    echo Disabling go environment
    val=PS1_$TTY
    export_var "PS1" "${!val}"
    val=PATH_$TTY
    export_var "PATH" "${!val}"
    val=GOPATH_$TTY
    export_var "GOPATH" "${!val}"
    export GOPATH=$GOPATH
    awk "/^(PS1|PATH|GOPATH)_$TTY/ { next } /^GONV_ACTIVE=${TTY}$/ { next } { print }" "$GONV_STATE_FILE" > "$GONV_STATE_FILE.tmp"
    mv "$GONV_STATE_FILE"{.tmp,}
    unset_trap
  else
    echo Go environment not active
  fi
}

gonv_destroy() {
  gonv_check_active
  echo Destroying go environment
  if [[ -d "$ENV_DIR" ]]
  then
   chmod -R +w $ENV_DIR/
   rm -r $ENV_DIR
  fi

  awk "/^GONV_$ARG_NAME=/ { next } { print }" "$GONV_STATE_FILE" >> "$GONV_STATE_FILE.tmp"
  mv "$GONV_STATE_FILE"{.tmp,}
}

gonv_list() {
  grep "GONV_" "$GONV_STATE_FILE" | sed 's/GONV_\(.*\)=.*/\1/'
}


readonly -f arguments_gonv
readonly -f task_gonv
readonly -f gonv_load_vars
readonly -f gonv_check_active
readonly -f gonv_init
readonly -f gonv_enable
readonly -f gonv_disable
readonly -f gonv_destroy
readonly -f gonv_list
